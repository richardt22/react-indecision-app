{"version":3,"sources":["components/AddOption.js","components/Option.js","components/Options.js","components/Header.js","components/Action.js","components/OptionModal.js","components/IndecisionApp.js","App.js","serviceWorker.js","index.js"],"names":["AddOption","state","error","undefined","handleAddOption","e","preventDefault","option","target","elements","value","trim","props","setState","this","className","onSubmit","type","name","React","Component","Option","count","optionText","onClick","handleDeleteOption","Options","handleDeleteOptions","options","length","map","index","key","Header","title","subtitle","defaultProps","Action","disabled","hasOptions","handlePick","OptionModal","isOpen","selectedOption","onRequestClose","handleClear","contentLabel","closeTimeoutMS","IndecisionApp","optionToRemove","prevState","filter","randomNum","Math","floor","random","indexOf","concat","json","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","console","log","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2301e2d8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class AddOption extends React.Component {\n    state = {\n        error: undefined\n    }\n\n    handleAddOption = (e) => {\n        e.preventDefault();\n\n        const option = e.target.elements.option.value.trim();\n        const error = this.props.handleAddOption(option);\n        \n        this.setState(() => ({ error }))\n\n        if (!error) {\n            e.target.elements.option.value = ''\n        }\n    }\n    render() {\n        return (\n            <div>\n                { this.state.error && <p className=\"add-option-error\">{ this.state.error }</p>}\n                <form className=\"add-option\" onSubmit={this.handleAddOption}>\n                    <input className=\"add-option__input\" type=\"text\" name=\"option\"/>\n                    <button className=\"button\">Add Option</button>\n                </form>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nconst Option = (props) => (\n    <div className=\"option\">\n        <p className=\"option__text\">{props.count}. { props.optionText }</p>\n        <button \n        className=\"button button--link\"\n        onClick={(e) => {\n            props.handleDeleteOption(props.optionText)\n        }}>\n        remove</button>\n    </div>\n)\n\nexport default Option;","import React from 'react';\nimport Option from './Option'\n\nconst Options = (props) => (\n    <div>\n        <div className=\"widget-header\">\n            <h3 className=\"widget-header__title\">Your Options</h3>\n            <button onClick={props.handleDeleteOptions}\n            className=\"button button--link\">Remove All</button>\n        </div>\n    \n    { props.options.length === 0 && <p className=\"widget__message\">Please add an option to get started!</p>}    \n    \n    { \n            props.options.map((option, index) => (\n                <Option key={option} \n                optionText={option}\n                count={index + 1}\n                handleDeleteOption={props.handleDeleteOption}/>\n            ))\n        }\n    </div>\n)\n\nexport default Options;","import React from 'react';\n\nconst Header = (props) => (\n    <div className=\"container\">\n        <div className=\"header\">\n            <h1 className=\"header__title\">{ props.title }</h1>\n            { props.subtitle && <h2 className=\"header__subtitle\">{ props.subtitle }</h2>}\n        </div>\n    </div>\n    \n)\n\nHeader.defaultProps = {\n    title: \"Indecision\"\n}\n\nexport default Header;","import React from 'react';\n\nconst Action = (props) => (\n    <div>\n        <button \n        className=\"big-button\"\n        disabled={!props.hasOptions}\n        onClick={props.handlePick}\n        >What should I do?</button>\n    </div>\n)\n\nexport default Action;","import React from 'react';\nimport Modal from 'react-modal';\n\nconst OptionModal = (props) => (\n    <Modal\n    isOpen={!!props.selectedOption}\n    onRequestClose={props.handleClear}\n    contentLabel=\"Selected Option\"\n    closeTimeoutMS={200}\n    className=\"modal\">\n        <h3 className=\"modal__title\">Selected Option</h3>\n        { props.selectedOption && <p className=\"modal__body\">{props.selectedOption}</p>}\n        <button onClick={props.handleClear}\n        className=\"button\">Okay</button>\n    </Modal>\n)\n\nexport default OptionModal","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport AddOption from './AddOption';\nimport Options from './Options'\nimport Header from './Header'\nimport Action from './Action'\nimport OptionModal from './OptionModal'\n\nexport default class IndecisionApp extends React.Component {\n    state = {\n        options: [],\n        selectedOption: undefined\n    }\n\n    handleDeleteOptions = () => {\n        // this.setState(() => {\n        //     return {\n        //         options: []\n        //     }\n        // })\n\n        this.setState(() => ({options: []}))\n    }\n\n    handleDeleteOption = (optionToRemove) => {\n        this.setState((prevState) => ({\n            options: prevState.options.filter((option) => \n            optionToRemove !== option\n            )\n        }))\n    }\n\n    handlePick = () => {\n        const randomNum = Math.floor(Math.random() * this.state.options.length);\n        const option = this.state.options[randomNum];\n        this.setState(() => ({\n            selectedOption: option\n        }))\n    }\n\n    handleAddOption = (option) => {\n        if (!option) {\n            return \"Enter valid value to add item\";\n        } else if (this.state.options.indexOf(option) > -1) {\n            return \"This option already exists\"\n        }\n\n        // this.setState((prevState) => {\n        //     return {\n        //         options: prevState.options.concat([option])\n        //     }\n        // })\n\n        this.setState((prevState) => ({\n            options: prevState.options.concat([option])\n        }))\n    }\n\n    handleClear = () => {\n        this.setState(() => ({\n            selectedOption: undefined\n        }))\n    }\n\n    componentDidMount() {\n        try {\n            const json = localStorage.getItem(\"options\")\n            const options = JSON.parse(json);\n\n            if (options) {\n                this.setState(() => ({ options }))\n            } \n        } catch (e) {\n            // Do nothing at all\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.options.length !== this.state.options.length) {\n            const json = JSON.stringify(this.state.options)\n            localStorage.setItem(\"options\", json);\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"component will unmount\")\n    }\n\n\n\n    render() {\n        const subtitle = \"Put your life in the hands of a computer\"\n        return (\n            <div>\n                <Header subtitle={subtitle}/>\n                <div className=\"container\">\n                    <Action hasOptions={this.state.options.length > 0}\n                    handlePick={this.handlePick}/> \n                    <div className=\"widget\">\n                        <Options options={this.state.options}\n                        handleDeleteOptions={this.handleDeleteOptions}\n                        handleDeleteOption={this.handleDeleteOption}/>\n                        <AddOption handleAddOption={this.handleAddOption}/>\n                    </div>\n                    \n                </div>\n         \n                <OptionModal selectedOption={this.state.selectedOption} \n                handleClear={this.handleClear} />\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport IndecisionApp from './components/IndecisionApp';\nimport './styles/styles.scss'\n\nReactDOM.render(<IndecisionApp />, document.getElementById('app'));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport IndecisionApp from './components/IndecisionApp';\nimport './styles/styles.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<IndecisionApp />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}